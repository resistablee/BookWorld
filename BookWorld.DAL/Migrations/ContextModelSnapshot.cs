// <auto-generated />
using System;
using BookWorld.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BookWorld.DAL.Migrations
{
    [DbContext(typeof(Context))]
    partial class ContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.8")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BookWorld.Entity.Entities.Books", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Author")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Author = "Paulo Coelho",
                            Name = "Simyacı"
                        },
                        new
                        {
                            Id = 2,
                            Author = "Fyodor Dostoyevski",
                            Name = "Suç ve Ceza"
                        },
                        new
                        {
                            Id = 3,
                            Author = "Sabahattin Ali",
                            Name = "Kürk Mantolu Madonna"
                        },
                        new
                        {
                            Id = 4,
                            Author = "Albert Camus",
                            Name = "Yabancı"
                        },
                        new
                        {
                            Id = 5,
                            Author = "Sabahattin Ali",
                            Name = "İçimizdeki Şeytan"
                        },
                        new
                        {
                            Id = 6,
                            Author = "Oğuz Atay",
                            Name = "Tutunamayanlar"
                        },
                        new
                        {
                            Id = 7,
                            Author = "Adam Fawer",
                            Name = "Olasılıksız"
                        },
                        new
                        {
                            Id = 8,
                            Author = "Oğuz Atay",
                            Name = "Tehlikeli Oyunlar"
                        },
                        new
                        {
                            Id = 9,
                            Author = "David Eagleman",
                            Name = "Incognito - Beynin Gizli Hayatı"
                        },
                        new
                        {
                            Id = 10,
                            Author = "Kevin Guilfoile",
                            Name = "Klon"
                        });
                });

            modelBuilder.Entity("BookWorld.Entity.Entities.UserBooks", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BookID")
                        .HasColumnType("int");

                    b.Property<int?>("BookRelationId")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.Property<int?>("UserRelationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BookRelationId");

                    b.HasIndex("UserRelationId");

                    b.ToTable("UserBooks");
                });

            modelBuilder.Entity("BookWorld.Entity.Entities.Users", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("BookWorld.Entity.Entities.UserBooks", b =>
                {
                    b.HasOne("BookWorld.Entity.Entities.Books", "BookRelation")
                        .WithMany("Relation2")
                        .HasForeignKey("BookRelationId");

                    b.HasOne("BookWorld.Entity.Entities.Users", "UserRelation")
                        .WithMany("Relation1")
                        .HasForeignKey("UserRelationId");

                    b.Navigation("BookRelation");

                    b.Navigation("UserRelation");
                });

            modelBuilder.Entity("BookWorld.Entity.Entities.Books", b =>
                {
                    b.Navigation("Relation2");
                });

            modelBuilder.Entity("BookWorld.Entity.Entities.Users", b =>
                {
                    b.Navigation("Relation1");
                });
#pragma warning restore 612, 618
        }
    }
}
